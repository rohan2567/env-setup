1. Docker on Ubuntu :
    sudo apt-get update
    sudo apt-get install docker.io
    sudo groupadd docker
    sudo usermod -aG docker $USER
    sudo chmod 666 /var/run/docker.sock
    docker --version
    
    Install CTOP command line for docker-monitoring :
    	sudo wget https://github.com/bcicen/ctop/releases/download/v0.7.1/ctop-0.7.1-linux-amd64  -O /usr/local/bin/ctop
	sudo chmod +x /usr/local/bin/ctop
	docker run --rm -ti --name=ctop -v /var/run/docker.sock:/var/run/docker.sock quay.io/vektorlab/ctop:latest

2. Terraform :
    sudo apt-get install unzip
    wget https://releases.hashicorp.com/terraform/0.14.3/terraform_0.14.3_linux_amd64.zip
    unzip terraform_0.14.3_linux_amd64.zip
    sudo mv terraform /usr/local/bin/
    terraform --version 
    
    To remove terraform :
    	sudo rm -f /usr/local/bin/terraform

3. Install angualr Cli :
    sudo apt-get install npm
    npm -v
    npm install -g angular/cli@8.1.0
    ng --version
    ng new my-app

4. Git on linux :
    apt-get install -y git

5. Docker Images :-->
    a. Jenkins 
    docker run --name Jenkins -v jenkins:/home/hp/jenkins_home -p 8080:8080 -p 50000:50000 jenkins/jenkins:lts

    b. Sonarqube
    docker run -d --name sonar -p 9000:9000 sonarqube

6. Install azure Cli on Ubuntu :
    sudo apt-get install ca-certificates curl apt-transport-https lsb-release gnupg
    
    curl -sL https://packages.microsoft.com/keys/microsoft.asc |
    gpg --dearmor |
    sudo tee /etc/apt/trusted.gpg.d/microsoft.gpg > /dev/null

    AZ_REPO=$(lsb_release -cs)
    echo "deb [arch=amd64] https://packages.microsoft.com/repos/azure-cli/ $AZ_REPO main" |
    sudo tee /etc/apt/sources.list.d/azure-cli.list

    sudo apt-get update
    sudo apt-get install azure-cli
    az --version

    Azure Cli login :
    az login -u <username> -p <password>

7. Install Docker inside a Jenkins container :
    Start Jenkins Container 
    Go into the shell of jenkins :
    	docker exec -it -u root --privileged=true <container-jenkins-name> /bin/bash
    Now,run the following script to install docker inside it:
        apt-get update && \
        apt-get -y install apt-transport-https \
        ca-certificates \
        curl \
        gnupg2 \
        software-properties-common && \
        curl -fsSL https://download.docker.com/linux/$(. /etc/os-release; echo "$ID")/gpg > /tmp/dkey; apt-key add /tmp/dkey && \
        add-apt-repository \
        "deb [arch=amd64] https://download.docker.com/linux/$(. /etc/os-release; echo "$ID") \
        $(lsb_release -cs) \
        stable" && \
        apt-get update && \
        apt-get -y install docker-ce

    Now, verify installation by "docker version"
    In Case of Errors :
    	 /etc/init.d/docker start

8.  Connecting Jenkins and sonarqube :
        start jenkins & sonarqube containers
        
9. Install a Kubernetes Cluster  :
            Initial setup :
	            ubuntu VM's on AWS
	            k8s master - t2.medium
	            node - t2.micro
	            Expose port 6443 on all the nodes

            Setting hostname on all nodes :
	            sudo hostnamectl set-hostname "k8s-master" 	//run on master
	            sudo hostnamectl set-hostname "k8s-node1"	//run on node 1
	
            Update entries in /etc/hosts on all nodes :
	            <ip of master>   k8s-master
	            <ip of node>     k8s-node1
	
            Install Docker on all nodes :
	            sudo apt update
	            sudo apt install -y docker.io
	            sudo groupadd docker
	            sudo usermod -aG docker $USER
	            sudo chmod 666 /var/run/docker.sock
	
            Disable swap and enable IP forwarding on all nodes :
	            sudo swapoff -a
	
            Enable the ip forwarding permanently :
	            in file “/etc/sysctl.conf”
	            look for line “net.ipv4.ip_forward=1” and un-comment it.
	            sudo sysctl -p
	
            Install Kubectl, kubelet and kubeadm on all nodes :
	            sudo apt install -y apt-transport-https curl
	            curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key add
	            sudo apt-add-repository "deb http://apt.kubernetes.io/ kubernetes-xenial main"
	            sudo apt update
	            sudo apt install -y kubelet kubeadm kubectl
	 
            Initialize Kubernetes Cluster using kubeadm from master node :
	            sudo systemctl enable docker.service
	            sudo kubeadm init
	            Copy the token generated on screen
	            Execute the commands :
		            mkdir -p $HOME/.kube
		            sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
		            sudo chown $(id -u):$(id -g) $HOME/.kube/config

            Join worker node by the token genefrated from kubeadm init.
	        On Node1 node:
	        kubeadm join 172.31.47.133:6443 --token oaccml.i60olbwjwi6x7ys2 --discovery-token-ca-cert-hash 
	        sha256:1ac033f7622827dc562c140f6221aadfcaf7c21573bf445b177f93cd055d3a1a

            Run command to make all nodes in a ready state :
	            kubectl apply -f https://docs.projectcalico.org/v3.14/manifests/calico.yaml

10. Setting up a Jenkins Slave using Ubuntu Vm :
        Create a ubuntu vm and only allow port 22 on it.
        On Jenkins Slave machine :
            sudo apt-get update
            sudo apt-get install default-jdk -y
            sudo apt-get install maven -y
            sudo useradd jenkins -m jenkins
            sudo -u jenkins mkdir /home/jenkins/.ssh
        On Master Node :
            cat ~/.ssh/id_rsa.pub
            Copy the output
        On Slave Machine :
            sudo -u jenkins nano /home/jenkins/.ssh/authorized_keys
            Paste the output, save and close the file
        On Master Node :
            Verify if you can login to slave from master
            ssh jenkins@<ip-of-slave-node>
        Open Jenkins
            Manage Jenkins -> Nodes -> Add node
            Give a name
            Choose permananet agent
            Choose no of executors as 1
            enter /home/jenkins as home directory
            Launch method - Launch slave nodes via ssh
            Create a ssh credential by copying from master node -> sudo cat ~/.ssh/id_rsa
            Save the configration.

11. Minikube Setup Ubuntu 20.04 :
	sudo apt-get update
	sudo apt-get install curl
	sudo apt-get install apt-transport-https
	sudo apt install virtualbox virtualbox-ext-pack
	Press "Tab" -> OK -> Yes
	
	curl -Lo minikube https://storage.googleapis.com/minikube/releases/v0.18.0/minikube-linux-amd64 && chmod +x minikube && sudo mv minikube /usr/local/bin/

	curl -Lo kubectl https://storage.googleapis.com/kubernetes-release/release/v1.6.0/bin/linux/amd64/kubectl && chmod +x kubectl && sudo mv kubectl 		/usr/local/bin/

	sudo curl -L https://github.com/dhiltgen/docker-machine-kvm/releases/download/v0.7.0/docker-machine-driver-kvm -o /usr/local/bin/docker-machine-driver-kvm

	sudo chmod +x /usr/local/bin/docker-machine-driver-kvm
	sudo apt install qemu qemu-kvm

	curl -Lo minikube https://storage.googleapis.com/minikube/releases/v0.18.0/minikube-linux-amd64 && chmod +x minikube && sudo mv minikube /usr/local/bin/
 	
	export MINIKUBE_WANTUPDATENOTIFICATION=false
 	export MINIKUBE_WANTREPORTERRORPROMPT=false
 	export MINIKUBE_HOME=$HOME
 	export CHANGE_MINIKUBE_NONE_USER=true
 	export KUBECONFIG=$HOME/.kube/config
   	sudo minikube start --vm-driver none
   	sudo chown -R $USER $HOME/.kube
 	sed 's/root/home\/rohan/g' $KUBECONFIG > tmp; mv tmp $KUBECONFIG
   
   	Kubernetes Dashboard :
	minikube dashboard
	
   	TROUBLESHOOTING :
	minikube stop
	minikube delete
	rm -rf ~/.kube
	rm -rf ~/.minikube
	sudo rm -rf /var/lib/minikube
	sudo rm /var/lib/kubeadm.yaml
	sudo rm -rf /etc/kubernetes

	Now, start from step to install minikube package again.

12 . Chef-Server Installation :

13. Chef- Workstation Installation :

14. Bootstraping Windows and Linux Servers from Chef-workstation :











































